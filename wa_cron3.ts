import * as fs from 'fs';
import { exec } from 'child_process';
import cron from 'node-cron';
import makeWASocket, { Browsers, DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys';
import { Boom } from '@hapi/boom';
import pino from 'pino';

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ ‚Äì —â–æ–± –ø—Ä–æ—Ü–µ—Å –Ω–µ –∑–∞–≤–µ—Ä—à—É–≤–∞–≤—Å—è
process.on('uncaughtException', (err) => {
  console.error('Unhandled Exception:', err);
});
process.on('unhandledRejection', (reason) => {
  console.error('Unhandled Rejection:', reason);
});

// –ß–∏—Ç–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
interface Config {
  app_name: string;
  groupName: string;
  messageText: string;
  sendTime: string;        // —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏, —Ñ–æ—Ä–º–∞—Ç "HH:MM" –∞–±–æ cron-–≤–∏—Ä–∞–∑
  alertSoundFile?: string; // —à–ª—è—Ö –¥–æ –∑–≤—É–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è (mp3)
}
let config: Config;
try {
  const configData = fs.readFileSync('config.json', 'utf-8');
  config = JSON.parse(configData) as Config;
} catch (e) {
  console.error('Failed to load config.json:', e);
  config = { app_name: '', groupName: '', messageText: '', sendTime: '' }; // –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ —Ä–æ–±–æ—Ç—É, —Ö–æ—á–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–µ–º–æ–∂–ª–∏–≤–∞
}

// –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ cron-–≤–∏—Ä–∞–∑—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
let cronExpression: string;
const [h, m] = config.sendTime.split(':');
cronExpression = `${parseInt(m, 10)} ${parseInt(h, 10)} * * *`;

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—É
let sock: any;                  // —Å–æ–∫–µ—Ç Baileys
let isConnected: boolean = false;
let targetJid: string | undefined; 
let lastSentDate: string | null = null;

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑ —Ñ–∞–π–ª—É (—è–∫—â–æ —î)
try {
  const lastData = fs.readFileSync('last_sent.json', 'utf-8');
  const obj = JSON.parse(lastData);
  if (obj && obj.lastSent) {
    lastSentDate = obj.lastSent;
  }
} catch (e) {
  // —Ñ–∞–π–ª –º–æ–∂–µ –Ω–µ —ñ—Å–Ω—É–≤–∞—Ç–∏ - —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
  lastSentDate = null;
}

// –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhatsApp
async function connectToWhatsApp() {
  try {
    const { state, saveCreds } = await useMultiFileAuthState('auth_info');
    sock = makeWASocket({
      auth: state,
      logger: pino({level: 'silent'}),
      browser: Browsers.baileys(config.app_name),
      printQRInTerminal: true
    });
    sock.ev.on('creds.update', saveCreds);

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    sock.ev.on('connection.update', async (update: any) => {
      const { connection, lastDisconnect } = update;
      if (connection === 'open') {
        isConnected = true;
        console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ WhatsApp —É—Å–ø—ñ—à–Ω–µ');
        // –û—Ç—Ä–∏–º—É—î–º–æ ID –≥—Ä—É–ø–∏ –∑–∞ –Ω–∞–∑–≤–æ—é (—è–∫—â–æ —â–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ)
        if (!targetJid && config.groupName) {
          try {
            const groups = await sock.groupFetchAllParticipating();
            for (const [jid, groupInfo] of Object.entries(groups)) {
              if ((groupInfo as any).subject === config.groupName) {
                targetJid = jid;
                break;
              }
            }
            if (targetJid) {
              console.log(`–¶—ñ–ª—å–æ–≤–∞ –≥—Ä—É–ø–∞: "${config.groupName}" –∑–Ω–∞–π–¥–µ–Ω–∞: ${targetJid}`);
            } else {
              console.error(`‚ö†Ô∏è –ì—Ä—É–ø–∞ "${config.groupName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.`);
            }
          } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä—É–ø:', err);
          }
        }
      } else if (connection === 'close') {
        isConnected = false;
        const error = lastDisconnect?.error;
        const shouldReconnect = (error instanceof Boom ? error.output.statusCode : 0) !== DisconnectReason.loggedOut;
        console.warn('Connection closed. Reason:', error?.message || error, '| Reconnect:', shouldReconnect);
        if (shouldReconnect) {
          // —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è
          connectToWhatsApp().catch(err => {
            console.error('Reconnect attempt failed:', err);
          });
        } else {
          console.log('Logged out from WhatsApp. Reconnection not attempted.');
        }
      }
    });

    // **–í—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è**, —Ç–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫ sock.ev.on('messages.upsert') —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω.
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhatsApp:', err);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
connectToWhatsApp().catch(err => {
  console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', err);
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–ø—Ä–∞–≤–∫—É
function updateLastSentToday() {
  const today = new Date();
  const yyyy = today.getFullYear();
  const mm = String(today.getMonth() + 1).padStart(2, '0');
  const dd = String(today.getDate()).padStart(2, '0');
  lastSentDate = `${yyyy}-${mm}-${dd}`;
  const data = JSON.stringify({ lastSent: lastSentDate });
  try {
    fs.writeFileSync('last_sent.json', data);
  } catch (e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ last_sent.json:', e);
  }
}

// –†–æ–∑–∫–ª–∞–¥ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
cron.schedule(cronExpression, async () => {
  // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –¥–Ω—è —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–æ—Å—å
  const todayStr = (() => {
    const d = new Date();
    const yy = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, '0');
    const dd = String(d.getDate()).padStart(2, '0');
    return `${yy}-${m}-${dd}`;
  })();
  if (lastSentDate === todayStr) {
    console.log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ —Å—å–æ–≥–æ–¥–Ω—ñ');
    return; // —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —Ç–æ–π —Å–∞–º–∏–π –¥–µ–Ω—å
  }

  // –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const messageContent = { text: config.messageText || '' };
  const destinationJid = targetJid;

  // –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏ —É —Ä–∞–∑—ñ –Ω–µ–≤–¥–∞—á—ñ
  let sent = false;
  let attempts = 0;
  const maxAttempts = 10; // ~5 —Ö–≤ –ø—Ä–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ 30 —Å–µ–∫
  console.log(`‚è∞ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ ${todayStr} ${config.sendTime}`);
  const intervalId = setInterval(async () => {
    attempts++;
    try {
      if (isConnected && destinationJid) {
        // –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º targetJid –¥–æ—Å—ñ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ (destinationJid undefined), —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –æ—Ç—Ä–∏–º–∞—Ç–∏
        if (!destinationJid) {
          try {
            const groups = await sock.groupFetchAllParticipating();
            for (const [jid, groupInfo] of Object.entries(groups)) {
              if ((groupInfo as any).subject === config.groupName) {
                targetJid = jid;
                break;
              }
            }
          } catch (err) {
            console.error('Group fetch failed during send attempts:', err);
          }
        }
        if (targetJid) {
          // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
          await sock.sendMessage(targetJid, messageContent);
          console.log('‚úîÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ.');
          sent = true;
          // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
          updateLastSentToday();
        } else {
          console.error('–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–µ –º–æ–∂–ª–∏–≤–∞: —Ü—ñ–ª—å–æ–≤–∞ –≥—Ä—É–ø–∞ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.');
          // –Ø–∫—â–æ –≥—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–¥–∞–ª—å—à—ñ —Å–ø—Ä–æ–±–∏ –±–µ–∑–≥–ª—É–∑–¥—ñ
          clearInterval(intervalId);
        }
      }
      if (sent) {
        clearInterval(intervalId);
        return; // —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
      }
      if (attempts >= maxAttempts) {
        // –í–∏—á–µ—Ä–ø–∞–Ω–æ 5 —Ö–≤–∏–ª–∏–Ω —Å–ø—Ä–æ–±
        clearInterval(intervalId);
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 5 —Ö–≤. –ø—ñ—Å–ª—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ–≥–æ —á–∞—Å—É.');
        // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª —Ç—Ä–∏–≤–æ–≥–∏ (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ —Ñ–∞–π–ª –∑–≤—É–∫—É)
        if (config.alertSoundFile) {
          exec(`play-audio "${config.alertSoundFile}"`, (err) => {
            if (err) {
              console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É:', err);
            } else {
              console.log('üîî –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–≤—É–∫ –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
            }
          });
        }
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è (lastSentDate –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ)
      }
    } catch (err) {
      // –û–±—Ä–æ–±–∫–∞ –±—É–¥—å-—è–∫–∏—Ö –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ
      console.error('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
    }
  }, 30000); // —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± ~30 —Å–µ–∫—É–Ω–¥
}, {
  timezone: 'Europe/Kyiv'
});
