import { exec } from 'child_process';
import cron from 'node-cron';
import * as fs from 'fs/promises';
import * as path from 'path';

interface Config {
  group: string;
  message: string;
  sendTime: string;
  alertSoundFile: string;
  successSoundFile: string;
}

class AppCron {
  private config: Config;
  private cronTask: cron.ScheduledTask | null = null;
  private sentOkPath: string;

  constructor(config: Config) {
    this.config = config;
    this.sentOkPath = path.join(__dirname, 'sent_ok');
  }

  public async start() {
    let scheduledDate: Date;
    try {
      // –§–∞–π–ª —ñ—Å–Ω—É—î ‚Äì –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Å—å–æ–≥–æ–¥–Ω—ñ
      await fs.access(this.sentOkPath);
      await fs.unlink(this.sentOkPath);
      scheduledDate = new Date();
      scheduledDate.setDate(scheduledDate.getDate() + 1);
      console.log(`üîî –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–æ—Å—å. –ù–∞—Å—Ç—É–ø–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞: ${this.formatDate(scheduledDate)} ${this.config.sendTime}`);
    } catch {
      // –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äì –ø–ª–∞–Ω—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
      scheduledDate = new Date();
      const [hourStr, minuteStr] = this.config.sendTime.split(':');
      const scheduledToday = new Date(scheduledDate);
      scheduledToday.setHours(parseInt(hourStr, 10), parseInt(minuteStr, 10), 0, 0);
      // –Ø–∫—â–æ —á–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –º–∏–Ω—É–≤ ‚Äì –ø–ª–∞–Ω—É—î–º–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
      if (scheduledToday <= new Date()) {
        scheduledToday.setDate(scheduledToday.getDate() + 1);
      }
      scheduledDate = scheduledToday;
      console.log(`–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞: ${this.formatDate(scheduledDate)} ${this.config.sendTime}`);
    }
    const cronExpression = this.getCronExpressionForDate(scheduledDate, this.config.sendTime);
    this.cronTask = cron.schedule(cronExpression, () => {
      exec('ts-node WA_bot.ts', async (error, stdout, stderr) => {
        if (error) console.error(`üî•–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±–æ—Ç–∞: ${error.message}`);
        console.log(stdout);
        console.error(stderr);
        try {
          await fs.access(this.sentOkPath);
          console.log('‚úÖ–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ.');
          exec(`play-audio "${this.config.successSoundFile}"`, (err) => {
            if (err) console.error('üîá–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É —É—Å–ø—ñ—Ö—É:', err);
          });
        } catch {
          console.error('‚ùå –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è.');
          exec(`play-audio "${this.config.alertSoundFile}"`, (err) => {
            if (err) console.error('üîá–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –ø–æ–º–∏–ª–∫–∏:', err);
          });
        }
      });
    });
  }

  private getCronExpressionForDate(date: Date, time: string): string {
    const [hourStr, minuteStr] = time.split(':');
    const minute = parseInt(minuteStr, 10);
    const hour = parseInt(hourStr, 10);
    const day = date.getDate();
    const month = date.getMonth() + 1;
    return `${minute} ${hour} ${day} ${month} *`;
  }

  private formatDate(date: Date): string {
    const dd = String(date.getDate()).padStart(2, '0');
    const mm = String(date.getMonth() + 1).padStart(2, '0');
    const yyyy = date.getFullYear();
    return `${dd}.${mm}.${yyyy}`;
  }
}

(async () => {
  try {
    const configPath = path.join(__dirname, 'config.json');
    const configData = await fs.readFile(configPath, 'utf-8');
    const config: Config = JSON.parse(configData);
    const appCron = new AppCron(config);
    await appCron.start();
  } catch (err) {
    console.error('üî•–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó AppCron:', err);
    process.exit(1);
  }
})();
